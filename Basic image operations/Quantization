import numpy as np
import matplotlib.pyplot as plt
from skimage import io, color
from matplotlib.colors import ListedColormap
import os

def quantize_image(image, levels):
    factor = 256 // levels
    quantized_image = (image // factor) * factor
    return quantized_image

gray_levels = [128, 64, 32, 16, 8, 4, 2]
quantized_images = {}
crossroad_image = np.fromfile('/content/crossroad.dat', dtype=np.uint8).reshape((435, 580))  # Adjust dimensions as necessary
plt.figure(figsize=(12, 8))
for i, levels in enumerate(gray_levels, 1):
    quantized_image = quantize_image(crossroad_image, levels)
    quantized_images[levels] = quantized_image
    plt.subplot(2, 4, i)
    plt.imshow(quantized_image, cmap='gray')
    plt.title(f"{levels} Gray Levels")
    plt.axis('off')

plt.tight_layout()
plt.show()

chro_image = io.imread('/content/chro.tif', as_gray=True)
glucose_image = io.imread('/content/glucose.tif', as_gray=True)
spectrum_image = io.imread('/content/spectrum.png')
umbrella_image = io.imread('/content/umbrella.jpg')
map_values = np.loadtxt('/content/map.txt')


plt.figure(figsize=(12, 8))
plt.subplot(2, 3, 1)
plt.imshow(chro_image, cmap='gray')
plt.title("Single-Channel Image 'chro' Without Any Map")
plt.axis('off')


color_maps = ['jet', 'hsv', 'hot', 'cool']
for i, cmap in enumerate(color_maps, 1):
    plt.subplot(2, 3, i+1)
    plt.imshow(chro_image, cmap=cmap)
    plt.title(f"{cmap.capitalize()} Color Map")
    plt.axis('off')
for i, cmap in enumerate(color_maps, 2):
    plt.subplot(2, 3, i+1)
    plt.imshow(chro_image, cmap=cmap)
    plt.title(f"{cmap.capitalize()} Color Map")
    plt.axis('off')


plt.tight_layout()
plt.show()


plt.figure()
plt.imshow(glucose_image, cmap='gray')
plt.title("Single-Channel Image 'glucose'")
plt.axis('off')
plt.show()


glucose_rgb = (color.gray2rgb(glucose_image) * 255).astype(np.uint8)
io.imsave("/content/glucose_rgb_uncompressed.png", glucose_rgb)
io.imsave("/content/glucose_rgb_compressed.jpg", glucose_rgb, quality=85)

uncompressed_size = os.path.getsize("/content/glucose_rgb_uncompressed.png")
compressed_size = os.path.getsize("/content/glucose_rgb_compressed.jpg")
print(f"Uncompressed Size: {uncompressed_size} bytes")
print(f"Compressed Size: {compressed_size} bytes")


spectrum = np.array(Image.open('/content/spectrum.png'))
plt.imshow(spectrum)
plt.figure()
plt.imshow(spectrum_image)
plt.title("Spectrum Image")
plt.axis('off')
plt.show()




if spectrum.shape[2] == 4:
    spectrum = spectrum[:, :, :3]

print("Spectrum shape after removing alpha channel:", spectrum.shape)

colormap = np.loadtxt('/content/map.txt')
print("Colormap shape:", colormap.shape)

if colormap.shape[0] == 3:
    colormap = colormap.T

def rgb_to_index(image, colormap):
    print("Image shape (inside function):", image.shape)
    print("Colormap shape (inside function):", colormap.shape)
    distances = np.linalg.norm(image[:, :, None, :] - colormap[None, None, :, :], axis=3)

    indexed_image = np.argmin(distances, axis=2)
    return indexed_image

indexed_spectrum = rgb_to_index(spectrum, colormap)


plt.imshow(indexed_spectrum, cmap='gray')
plt.title('Indexed Spectrum Image with Custom Colormap')
plt.axis('off')
plt.show()


if umbrella_image.shape[2] == 4:
    umbrella_image = umbrella_image[:, :, :3]

umbrella_single_channel = color.rgb2gray(umbrella_image)

plt.figure()
plt.imshow(umbrella_single_channel, cmap=custom_colormap)
plt.title("Umbrella Image Converted to Single Channel Using Custom Map")
plt.axis('off')
plt.show()



