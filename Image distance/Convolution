import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import convolve

x = np.linspace(-5, 5, 100)
f = np.exp(-x**2)

g1 = np.convolve(f, f, mode='same')
g2 = np.convolve(g1, g1, mode='same')
g3 = np.convolve(g2, g2, mode='same')

plt.figure(figsize=(12, 6))
plt.subplot(2, 2, 1)
plt.plot(x, f, label="f")
plt.title("Original Signal f")
plt.legend()

plt.subplot(2, 2, 2)
plt.plot(x, g1, label="g1 = f * f")
plt.title("1st Convolution (f * f)")
plt.legend()

plt.subplot(2, 2, 3)
plt.plot(x, g2, label="g2 = g1 * g1")
plt.title("2nd Convolution (g1 * g1)")
plt.legend()

plt.subplot(2, 2, 4)
plt.plot(x, g3, label="g3 = g2 * g2")
plt.title("3rd Convolution (g2 * g2)")
plt.legend()

plt.tight_layout()
plt.show()

def gaussian_kernel(size, sigma=1):
    ax = np.linspace(-(size - 1) / 2., (size - 1) / 2., size)
    xx, yy = np.meshgrid(ax, ax)
    kernel = np.exp(-0.5 * (np.square(xx) + np.square(yy)) / np.square(sigma))
    return kernel / np.sum(kernel)

image = np.random.rand(100, 100) * 255

kernel_size = 7
sigma = 1
gaussian_kernel_2d = gaussian_kernel(kernel_size, sigma)

convolved_image = convolve(image, gaussian_kernel_2d, mode='reflect')

convolved_self_image = convolve(convolved_image, convolved_image, mode='reflect')

image_small_section = image[:50, :50]
convolved_image_small_section = convolve(image_small_section, gaussian_kernel_2d, mode='reflect')
plt.figure(figsize=(8, 4))

plt.subplot(1, 2, 1)
plt.imshow(image_small_section, cmap='gray')
plt.title("Original Image Section")
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(convolved_image_small_section, cmap='gray')
plt.title("Gaussian-Convolved Section")
plt.axis('off')

plt.tight_layout()
plt.show()

