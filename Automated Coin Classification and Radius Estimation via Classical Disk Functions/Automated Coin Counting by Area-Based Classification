
coins_image_path = '/content/coins.bmp'
coins_image = imread(coins_image_path)

if len(coins_image.shape) == 3:
    gray_coins_image = rgb2gray(coins_image)
else:
    gray_coins_image = coins_image


binary_coins_image = gray_coins_image > 0.5
coins_labels = label(binary_coins_image)
coin_regions = regionprops(coins_labels)

class_1_count = sum(1500 <= region.area <= 2000 for region in coin_regions)
class_2_count = sum(2300 <= region.area <= 2800 for region in coin_regions)

print(f"Class 1 (1500-2000 pixels): {class_1_count}")
print(f"Class 2 (2300-2800 pixels): {class_2_count}")

fig, axes = plt.subplots(1, 3, figsize=(15, 5))

axes[0].imshow(gray_coins_image, cmap='gray')
axes[0].set_title('Original Grayscale Image')
axes[0].axis('off')

axes[1].imshow(binary_coins_image, cmap='gray')
axes[1].set_title('Binary Image')
axes[1].axis('off')

axes[2].imshow(coins_labels, cmap='nipy_spectral')
axes[2].set_title('Labeled Regions')
axes[2].axis('off')

plt.tight_layout()
plt.show()
import numpy as np
from skimage.filters import threshold_otsu
areas = [region.area for region in coin_regions]
TAB = np.array(areas)
TAB

otsu_threshold = threshold_otsu(gray_image)
binary_image = gray_image > otsu_threshold

print(f'Otsu Threshold: {otsu_threshold}')
plt.imshow(binary_image, cmap='gray')
plt.title('Binary Image (Otsu Threshold)')
plt.axis('off')
plt.show()

